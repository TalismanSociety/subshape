export const snapshot = {};

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.str)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) { a: "hi", b: "sup", c: "yo" } 1`] = `
0c
04
61
08
68
69
04
62
0c
73
75
70
04
63
08
79
6f
`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.str)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) { the: "quick", brown: "fox", jumped: "over", theLazy: "hen" } 1`] = `
10
0c
74
68
65
14
71
75
69
63
6b
14
62
72
6f
77
6e
0c
66
6f
78
18
6a
75
6d
70
65
64
10
6f
76
65
72
1c
74
68
65
4c
61
7a
79
0c
68
65
6e
`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\\n      \$.tuple(\\n        \$.str,\\n        \$.transform(\\n          {\\n            "\$base": \$.array(\$.tuple(\$.str, \$.u8)),\\n            encode: [Function: entries],\\n            decode: [Function: fromEntries]\\n          }\\n        )\\n      )\\n    ),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) { one: { two: 3 }, four: { five: 6 }, seven: { eight: 9 } } 1`] = `
0c
0c
6f
6e
65
04
0c
74
77
6f
03
10
66
6f
75
72
04
10
66
69
76
65
06
14
73
65
76
65
6e
04
14
65
69
67
68
74
09
`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.str)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) invalid [ true, false ] 1`] = `ShapeAssertError: typeof value#encode[0][1] !== "string"`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.str)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) invalid [ 1, 2, 3, -1, 4 ] 1`] = `ShapeAssertError: typeof value#encode[0][1] !== "string"`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.u8)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) invalid { this: "should" } 1`] = `ShapeAssertError: typeof value#encode[0][1] !== "number"`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.u8)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) invalid { be: "invalid" } 1`] = `ShapeAssertError: typeof value#encode[0][1] !== "number"`;

snapshot[`\$.transform(\\n  {\\n    "\$base": \$.array(\$.tuple(\$.str, \$.u8)),\\n    encode: [Function: entries],\\n    decode: [Function: fromEntries]\\n  }\\n) invalid { and: "this" } 1`] = `ShapeAssertError: typeof value#encode[0][1] !== "number"`;
